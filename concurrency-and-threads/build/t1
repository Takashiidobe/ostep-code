	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 10, 15
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ## -- Begin function GetTime
LCPI0_0:
	.quad	0x412e848000000000              ## double 1.0E+6
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_GetTime
	.p2align	4, 0x90
_GetTime:                               ## @GetTime
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-16(%rbp), %rdi
	xorl	%esi, %esi
	callq	_gettimeofday
	testl	%eax, %eax
	jne	LBB0_2
## %bb.1:
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm0
	vcvtsi2sdl	-8(%rbp), %xmm1, %xmm1
	vdivsd	LCPI0_0(%rip), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	addq	$16, %rsp
	popq	%rbp
	retq
LBB0_2:
	leaq	L___func__.GetTime(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	movl	$11, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__literal8,8byte_literals
	.p2align	3                               ## -- Begin function Spin
LCPI1_0:
	.quad	0x412e848000000000              ## double 1.0E+6
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_Spin
	.p2align	4, 0x90
_Spin:                                  ## @Spin
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	leaq	-24(%rbp), %rdi
	xorl	%esi, %esi
	callq	_gettimeofday
	testl	%eax, %eax
	jne	LBB1_5
## %bb.1:
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm0
	vcvtsi2sdl	-16(%rbp), %xmm1, %xmm1
	vdivsd	LCPI1_0(%rip), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -40(%rbp)                ## 8-byte Spill
	vcvtsi2sd	%ebx, %xmm2, %xmm0
	vmovsd	%xmm0, -32(%rbp)                ## 8-byte Spill
	leaq	-24(%rbp), %rbx
	.p2align	4, 0x90
LBB1_2:                                 ## =>This Inner Loop Header: Depth=1
	movq	%rbx, %rdi
	xorl	%esi, %esi
	callq	_gettimeofday
	testl	%eax, %eax
	jne	LBB1_5
## %bb.3:                               ##   in Loop: Header=BB1_2 Depth=1
	vcvtsi2sdq	-24(%rbp), %xmm2, %xmm0
	vcvtsi2sdl	-16(%rbp), %xmm2, %xmm1
	vdivsd	LCPI1_0(%rip), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vsubsd	-40(%rbp), %xmm0, %xmm0         ## 8-byte Folded Reload
	vmovsd	-32(%rbp), %xmm1                ## 8-byte Reload
                                        ## xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	LBB1_2
## %bb.4:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	retq
LBB1_5:
	leaq	L___func__.GetTime(%rip), %rdi
	leaq	L_.str(%rip), %rsi
	leaq	L_.str.1(%rip), %rcx
	movl	$11, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.globl	_mythread                       ## -- Begin function mythread
	.p2align	4, 0x90
_mythread:                              ## @mythread
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	leaq	L_.str.2(%rip), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	_printf
	movl	$10000000, %eax                 ## imm = 0x989680
	.p2align	4, 0x90
LBB2_1:                                 ## =>This Inner Loop Header: Depth=1
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	lock		incl	_counter(%rip)
	addl	$-20, %eax
	jne	LBB2_1
## %bb.2:
	leaq	L_.str.3(%rip), %rdi
	movq	%rbx, %rsi
	xorl	%eax, %eax
	callq	_printf
	xorl	%eax, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc
                                        ## -- End function
	.globl	_main                           ## -- Begin function main
	.p2align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	_counter(%rip), %esi
	leaq	L_.str.4(%rip), %rdi
	xorl	%eax, %eax
	callq	_printf
	leaq	_mythread(%rip), %rdx
	leaq	L_.str.5(%rip), %rcx
	leaq	-16(%rbp), %rdi
	xorl	%esi, %esi
	callq	_pthread_create
	testl	%eax, %eax
	jne	LBB3_5
## %bb.1:
	leaq	_mythread(%rip), %rdx
	leaq	L_.str.8(%rip), %rcx
	leaq	-8(%rbp), %rdi
	xorl	%esi, %esi
	callq	_pthread_create
	testl	%eax, %eax
	jne	LBB3_6
## %bb.2:
	movq	-16(%rbp), %rdi
	xorl	%esi, %esi
	callq	_pthread_join
	testl	%eax, %eax
	jne	LBB3_7
## %bb.3:
	movq	-8(%rbp), %rdi
	xorl	%esi, %esi
	callq	_pthread_join
	testl	%eax, %eax
	jne	LBB3_8
## %bb.4:
	movl	_counter(%rip), %esi
	leaq	L_.str.12(%rip), %rdi
	xorl	%eax, %eax
	callq	_printf
	xorl	%eax, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
LBB3_5:
	leaq	L___func__.main(%rip), %rdi
	leaq	L_.str.6(%rip), %rsi
	leaq	L_.str.7(%rip), %rcx
	movl	$32, %edx
	callq	___assert_rtn
LBB3_6:
	leaq	L___func__.main(%rip), %rdi
	leaq	L_.str.6(%rip), %rsi
	leaq	L_.str.9(%rip), %rcx
	movl	$33, %edx
	callq	___assert_rtn
LBB3_7:
	leaq	L___func__.main(%rip), %rdi
	leaq	L_.str.6(%rip), %rsi
	leaq	L_.str.10(%rip), %rcx
	movl	$36, %edx
	callq	___assert_rtn
LBB3_8:
	leaq	L___func__.main(%rip), %rdi
	leaq	L_.str.6(%rip), %rsi
	leaq	L_.str.11(%rip), %rcx
	movl	$37, %edx
	callq	___assert_rtn
	.cfi_endproc
                                        ## -- End function
	.section	__TEXT,__cstring,cstring_literals
L___func__.GetTime:                     ## @__func__.GetTime
	.asciz	"GetTime"

L_.str:                                 ## @.str
	.asciz	"src/../../include/common.h"

L_.str.1:                               ## @.str.1
	.asciz	"rc == 0"

	.globl	_counter                        ## @counter
.zerofill __DATA,__common,_counter,4,2
L_.str.2:                               ## @.str.2
	.asciz	"%s: begin\n"

L_.str.3:                               ## @.str.3
	.asciz	"%s: done\n"

L_.str.4:                               ## @.str.4
	.asciz	"main: begin (counter = %d)\n"

L_.str.5:                               ## @.str.5
	.asciz	"A"

L___func__.main:                        ## @__func__.main
	.asciz	"main"

L_.str.6:                               ## @.str.6
	.asciz	"src/t1.c"

L_.str.7:                               ## @.str.7
	.asciz	"pthread_create(&p1, ((void*)0), mythread, \"A\") == 0"

L_.str.8:                               ## @.str.8
	.asciz	"B"

L_.str.9:                               ## @.str.9
	.asciz	"pthread_create(&p2, ((void*)0), mythread, \"B\") == 0"

L_.str.10:                              ## @.str.10
	.asciz	"pthread_join(p1, ((void*)0)) == 0"

L_.str.11:                              ## @.str.11
	.asciz	"pthread_join(p2, ((void*)0)) == 0"

L_.str.12:                              ## @.str.12
	.asciz	"main: done with both (counter = %d)\n"

.subsections_via_symbols
